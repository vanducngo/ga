import numpy as np
from copy import deepcopy
from operator import attrgetter


'''
Solution ƒë·∫°i di·ªán cho m·ªôt gi·∫£i ph√°p trong thu·∫≠t to√°n ti·∫øn h√≥a
    + Qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa m·ªôt gi·∫£i ph√°p, bao g·ªìm c√°c pixel ƒë∆∞·ª£c thay ƒë·ªïi, gi√° tr·ªã c·ªßa ch√∫ng, v√† h√¨nh ·∫£nh b·ªã t·∫•n c√¥ng.
    + ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng c·ªßa gi·∫£i ph√°p th√¥ng qua h√†m m·∫•t m√°t (loss_function) v√† c√°c ch·ªâ s·ªë kh√°c.
    + Cung c·∫•p c√°c c√¥ng c·ª• ƒë·ªÉ ki·ªÉm tra s·ª± ∆∞u vi·ªát (dominance) so v·ªõi c√°c gi·∫£i ph√°p kh√°c
'''
class Solution:
    def __init__(self, pixels, values, x, p_size):
        # pixels: Danh s√°ch c√°c pixel (v·ªã tr√≠) ƒë∆∞·ª£c thay ƒë·ªïi trong h√¨nh ·∫£nh.
        self.pixels = pixels  # list of Integers
        # values: Danh s√°ch gi√° tr·ªã ƒë∆∞·ª£c √°p d·ª•ng cho c√°c pixel ƒë∆∞·ª£c ch·ªçn (c√≥ th·ªÉ l√† -1, 1, ho·∫∑c 0).
        self.values = values  # list of Binary tuples, i.e. [0, 1, 1]
        # H√¨nh ·∫£nh g·ªëc (d∆∞·ªõi d·∫°ng ma tr·∫≠n  w√ów√ó3, t∆∞∆°ng ·ª©ng v·ªõi chi·ªÅu cao, chi·ªÅu r·ªông, v√† k√™nh m√†u).
        self.x = x  # (w x w x 3)
        # fitnesses: M·∫£ng l∆∞u tr·ªØ c√°c gi√° tr·ªã h√†m m·ª•c ti√™u c·ªßa gi·∫£i ph√°p.
        self.fitnesses = []
        # is_adversarial: Bi·∫øn boolean, x√°c ƒë·ªãnh li·ªáu gi·∫£i ph√°p c√≥ ph·∫£i l√† ƒë·ªëi kh√°ng hay kh√¥ng.
        self.is_adversarial = None
        # K√≠ch th∆∞·ªõc chi·ªÅu r·ªông/chi·ªÅu cao c·ªßa h√¨nh ·∫£nh (gi·∫£ ƒë·ªãnh l√† h√¨nh vu√¥ng)
        self.w = x.shape[0]
        # S·ªë l∆∞·ª£ng pixel ƒë∆∞·ª£c thay ƒë·ªïi trong gi·∫£i ph√°p
        self.delta = len(self.pixels)
        
        # C√°c thu·ªôc t√≠nh li√™n quan ƒë·∫øn thu·∫≠t to√°n ti·∫øn h√≥a ƒëa m·ª•c ti√™u

        # S·ªë l·∫ßn ph∆∞∆°ng √°n n√†y b·ªã th·ªëng tr·ªã (dominated) b·ªüi ph∆∞∆°ng √°n kh√°c
        self.domination_count = None
        # Danh s√°ch c√°c gi·∫£i ph√°p m√† gi·∫£i ph√°p n√†y chi ph·ªë
        self.dominated_solutions = None
        # rank: C·∫•p b·∫≠c c·ªßa gi·∫£i ph√°p trong ph√¢n lo·∫°i kh√¥ng tr·ªôi (Pareto front).
        self.rank = None
        # Kho·∫£ng c√°ch ƒë√¥ng ƒë√∫c, ƒëo l∆∞·ªùng m·ª©c ƒë·ªô ph√¢n t√°n c·ªßa gi·∫£i ph√°p trong m·∫∑t tr·∫≠n Pareto.
        self.crowding_distance = None

        self.loss = None
        self.p_size = p_size

    def copy(self):
        a = deepcopy(self)
        return deepcopy(self)

    def euc_distance(self, img):
        '''
         + T√≠nh kho·∫£ng c√°ch L2 (b√¨nh ph∆∞∆°ng kho·∫£ng c√°ch Euclidean) gi·ªØa h√¨nh ·∫£nh b·ªã t·∫•n c√¥ng (img) v√† h√¨nh ·∫£nh g·ªëc (self.x).
         + ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë√°nh gi√° m·ª©c ƒë·ªô thay ƒë·ªïi c·ªßa gi·∫£i ph√°p.
        '''
        return np.sum((img - self.x.copy()) ** 2)

    def generate_image(self):
        '''
        T·∫°o h√¨nh ·∫£nh ƒë·ªëi kh√°ng (x_adv) b·∫±ng c√°ch √°p d·ª•ng nhi·ªÖu l√™n h√¨nh ·∫£nh g·ªëc.
        '''
        x_adv = self.x.copy()
        
        for i in range(self.delta):
            row = self.pixels[i] // self.w
            col = self.pixels[i] % self.w
            # print(f"Before Update: {x_adv[row, col]}")
            x_adv[row, col] += np.uint8(self.values[i] * self.p_size)
            # print(f"After Update: {x_adv[row, col]}")
            # x_adv[self.pixels[i] // self.w, self.pixels[i] % self.w] += np.uint8(self.values[i] * self.p_size)

        # x_adv = x_adv / 255
        return np.clip(x_adv, 0, 255)
        # return x_adv

    def evaluate(self, loss_function, include_dist):
        # T·∫°o h√¨nh ·∫£nh ƒë·ªëi kh√°ng (img_adv)
        img_adv = self.generate_image()
        # T√≠nh gi√° tr·ªã h√†m m·∫•t m√°t th√¥ng qua loss_function
        # H√†m loss tr·∫£ v·ªÅ m·ªôt danh s√°ch, v·ªõi 
        #    + ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n l√† boolean x√°c ƒë·ªãnh t√≠nh ƒë·ªëi kh√°ng 
        #    + c√°c ph·∫ßn t·ª≠ ti·∫øp theo l√† gi√° tr·ªã h√†m m·ª•c ti√™u
        fs = loss_function(img_adv)
        # X√°c ƒë·ªãnh xem gi·∫£i ph√°p c√≥ ph·∫£i l√† ƒë·ªëi kh√°ng (is_adversarial) hay kh√¥ng (gi√° tr·ªã boolean t·ª´ fs[0]).
        self.is_adversarial = fs[0]  # Assume first element is boolean always
        # L∆∞u c√°c gi√° tr·ªã h√†m m·ª•c ti√™u v√†o fitnesses.
        self.fitnesses = fs[1:]
        
        # N·∫øu include_dist l√† True, th√™m kho·∫£ng c√°ch ùêø2 v√†o fitnesses.
        if include_dist:
            dist = self.euc_distance(img_adv)
            self.fitnesses.append(dist)
        else:
            self.fitnesses.append(0)

        self.fitnesses = np.array(self.fitnesses)
        self.loss = fs[1]

    # X√°c ƒë·ªãnh xem gi·∫£i ph√°p hi·ªán t·∫°i c√≥ chi ph·ªëi (dominate) m·ªôt gi·∫£i ph√°p kh√°c (soln) hay kh√¥ng.
    def dominates(self, soln):
        if self.is_adversarial is True and soln.is_adversarial is False:
            # N·∫øu gi·∫£i ph√°p hi·ªán t·∫°i l√† ƒë·ªëi kh√°ng v√† gi·∫£i ph√°p kia kh√¥ng ph·∫£i, th√¨ gi·∫£i ph√°p hi·ªán t·∫°i chi ph·ªëi.
            return True

        if self.is_adversarial is False and soln.is_adversarial is True:
            # N·∫øu gi·∫£i ph√°p kia l√† ƒë·ªëi kh√°ng v√† gi·∫£i ph√°p hi·ªán t·∫°i kh√¥ng ph·∫£i, th√¨ gi·∫£i ph√°p hi·ªán t·∫°i kh√¥ng chi ph·ªëi.
            return False

        if self.is_adversarial is True and soln.is_adversarial is True:
            # N·∫øu c·∫£ hai ƒë·ªÅu l√† ƒë·ªëi kh√°ng:
            # So s√°nh gi√° tr·ªã m·ª•c ti√™u th·ª© hai (fitnesses[1], v√≠ d·ª•: kho·∫£ng c√°ch ùêø2).
            return True if self.fitnesses[1] < soln.fitnesses[1] else False

        if self.is_adversarial is False and soln.is_adversarial is False:
            # N·∫øu c·∫£ hai kh√¥ng ph·∫£i l√† ƒë·ªëi kh√°ng
            # So s√°nh gi√° tr·ªã m·ª•c ti√™u th·ª© nh·∫•t (fitnesses[0], v√≠ d·ª•: gi√° tr·ªã h√†m m·∫•t m√°t)
            return True if self.fitnesses[0] < soln.fitnesses[0] else False

'''
Ph√¢n lo·∫°i qu·∫ßn th·ªÉ c√°c gi·∫£i ph√°p trong thu·∫≠t to√°n ti·∫øn h√≥a ƒëa m·ª•c ti√™u th√†nh c√°c m·∫∑t tr·∫≠n Pareto (Pareto fronts). 
ƒê√¢y l√† m·ªôt b∆∞·ªõc quan tr·ªçng trong vi·ªác ch·ªçn l·ªçc c√°c gi·∫£i ph√°p d·ª±a tr√™n ƒë·ªô ∆∞u vi·ªát (dominance)

- Front 0 (Pareto-optimal front): T·∫≠p h·ª£p c√°c gi·∫£i ph√°p kh√¥ng b·ªã chi ph·ªëi b·ªüi b·∫•t k·ª≥ gi·∫£i ph√°p n√†o kh√°c.
- Front 1: C√°c gi·∫£i ph√°p b·ªã chi ph·ªëi tr·ª±c ti·∫øp b·ªüi Front 0, nh∆∞ng kh√¥ng b·ªã chi ph·ªëi b·ªüi gi·∫£i ph√°p n√†o kh√°c trong Front 1.
- Front 2, 3,...: T∆∞∆°ng t·ª±.
'''
def fast_nondominated_sort(population):
    fronts = [[]]
    # V·ªõi m·ªói individual trong qu·∫ßn th·ªÉ
    for individual in population:
        # s·ªë l∆∞·ª£ng gi·∫£i ph√°p chi ph·ªëi individual
        individual.domination_count = 0
        # Danh s√°ch c√°c gi·∫£i ph√°p b·ªã individual chi ph·ªëi
        individual.dominated_solutions = []
        
        for other_individual in population:
            if individual.dominates(other_individual):
                # individual chi ph·ªëi other_individual
                individual.dominated_solutions.append(other_individual)
            elif other_individual.dominates(individual):
                # other_individual chi ph·ªëi individual
                individual.domination_count += 1
        
        if individual.domination_count == 0:
            # Front 0 (Pareto-optimal front)
            individual.rank = 0
            fronts[0].append(individual)
    
    # Ph√¢n lo·∫°i c√°c m·∫∑t tr·∫≠n Pareto ti·∫øp theo
    i = 0
    while len(fronts[i]) > 0:
        temp = []
        for individual in fronts[i]:
            for other_individual in individual.dominated_solutions:
                other_individual.domination_count -= 1
                if other_individual.domination_count == 0:
                    other_individual.rank = i + 1
                    temp.append(other_individual)
        i = i + 1
        fronts.append(temp)

    return fronts

'''
T√≠nh kho·∫£ng c√°ch ƒë√¥ng ƒë√∫c (crowding distance) cho c√°c gi·∫£i ph√°p trong m·ªôt m·∫∑t tr·∫≠n Pareto (front)
=> ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë√°nh gi√° m·ª©c ƒë·ªô ƒëa d·∫°ng c·ªßa c√°c gi·∫£i ph√°p trong m·ªôt m·∫∑t tr·∫≠n.

Kho·∫£ng c√°ch ƒë√¥ng ƒë√∫c gi√∫p x√°c ƒë·ªãnh:
  + Nh·ªØng gi·∫£i ph√°p ·ªü g·∫ßn ranh gi·ªõi (boundary) c·ªßa m·∫∑t tr·∫≠n ƒë∆∞·ª£c ∆∞u ti√™n h∆°n, v√¨ ch√∫ng c√≥ kho·∫£ng c√°ch ƒë√¥ng ƒë√∫c cao.
  + Gi·∫£i ph√°p c√≥ kho·∫£ng c√°ch ƒë√¥ng ƒë√∫c cao h∆°n ƒë∆∞·ª£c gi·ªØ l·∫°i trong qu√° tr√¨nh ch·ªçn l·ªçc ƒë·ªÉ ƒë·∫£m b·∫£o s·ª± ƒëa d·∫°ng c·ªßa qu·∫ßn th·ªÉ.

√ù nghƒ©a:
  + C√°c gi·∫£i ph√°p n·∫±m g·∫ßn nhau h∆°n s·∫Ω c√≥ kho·∫£ng c√°ch ƒë√¥ng ƒë√∫c nh·ªè h∆°n.
  + Kho·∫£ng c√°ch ƒë√¥ng ƒë√∫c cao khuy·∫øn kh√≠ch s·ª± ƒëa d·∫°ng trong qu√° tr√¨nh ch·ªçn l·ªçc.

'''
def calculate_crowding_distance(front):
    if len(front) > 0:
        # S·ªë l∆∞·ª£ng gi·∫£i ph√°p trong m·∫∑t tr·∫≠n front
        solutions_num = len(front)
        
        # Kh·ªüi t·∫°o crowding_distance cho t·ª´ng gi·∫£i ph√°p
        for individual in front:
            individual.crowding_distance = 0
        # len(front[0].fitnesses) l√† s·ªë l∆∞·ª£ng h√†m m·ª•c ti√™u trong b√†i to√°n (th∆∞·ªùng l√† ƒëa m·ª•c ti√™u).
        for m in range(len(front[0].fitnesses)):
            # S·∫Øp x·∫øp c√°c gi·∫£i ph√°p trong m·∫∑t tr·∫≠n theo gi√° tr·ªã c·ªßa h√†m m·ª•c ti√™u th·ª© m
            front.sort(key=lambda individual: individual.fitnesses[m])
            # G√°n gi√° tr·ªã l·ªõn cho c√°c gi·∫£i ph√°p bi√™n
            # Gi·∫£i ph√°p c√≥ gi√° tr·ªã nh·ªè nh·∫•t v√† l·ªõn nh·∫•t tr√™n h√†m m·ª•c ti√™u th·ª© m ƒë∆∞·ª£c ∆∞u ti√™n h∆°n v√¨ ch√∫ng n·∫±m ·ªü bi√™n c·ªßa m·∫∑t tr·∫≠n.
            front[0].crowding_distance = 10 ** 9
            front[solutions_num - 1].crowding_distance = 10 ** 9
            
            # L·∫•y gi√° tr·ªã c·ªßa h√†m m·ª•c ti√™u th·ª© m cho t·∫•t c·∫£ c√°c gi·∫£i ph√°p trong m·∫∑t tr·∫≠n.
            m_values = [individual.fitnesses[m] for individual in front]
            # T√≠nh thang ƒëo (scale)
            scale = max(m_values) - min(m_values)
            
            # N·∫øu scale = 0 (t·∫•t c·∫£ c√°c gi√° tr·ªã c·ªßa h√†m m·ª•c ti√™u l√† gi·ªëng nhau), g√°n scale = 1 ƒë·ªÉ tr√°nh l·ªói chia cho 0.
            if scale == 0: scale = 1

            # V·ªõi m·ªói gi·∫£i ph√°p (tr·ª´ gi·∫£i ph√°p ƒë·∫ßu ti√™n v√† cu·ªëi c√πng), t√≠nh kho·∫£ng c√°ch ƒë√¥ng ƒë√∫c d·ª±a tr√™n ch√™nh 
            # l·ªách gi√° tr·ªã c·ªßa c√°c gi·∫£i ph√°p l√¢n c·∫≠n tr√™n h√†m m·ª•c ti√™u th·ª© m
            for i in range(1, solutions_num - 1):
                front[i].crowding_distance += (front[i + 1].fitnesses[m] - front[i - 1].fitnesses[m]) / scale

'''
So s√°nh hai gi·∫£i ph√°p (individual v√† other_individual) trong m·ªôt thu·∫≠t to√°n ti·∫øn h√≥a ƒëa m·ª•c ti√™u. So s√°nh n√†y d·ª±a tr√™n hai y·∫øu t·ªë:
    + Rank (c·∫•p b·∫≠c): M·ª©c ƒë·ªô chi ph·ªëi c·ªßa gi·∫£i ph√°p, hay th·ª© t·ª± m·∫∑t tr·∫≠n Pareto m√† gi·∫£i ph√°p thu·ªôc v·ªÅ.
    + Crowding Distance (kho·∫£ng c√°ch ƒë√¥ng ƒë√∫c): M·ª©c ƒë·ªô ph√¢n t√°n c·ªßa gi·∫£i ph√°p trong m·∫∑t tr·∫≠n Pareto m√† n√≥ thu·ªôc v·ªÅ.
=> Quy·∫øt ƒë·ªãnh gi·∫£i ph√°p n√†o ƒë∆∞·ª£c ∆∞u ti√™n h∆°n.
'''
def crowding_operator(individual, other_individual):
    if (individual.rank < other_individual.rank) or ((individual.rank == other_individual.rank) and (
            individual.crowding_distance > other_individual.crowding_distance)):
        return 1
    else:
        return -1

'''
Th·ª±c hi·ªán m·ªôt v√≤ng ch·ªçn l·ªçc gi·∫£i ƒë·∫•u (tournament selection) t·ª´ qu·∫ßn th·ªÉ (population)
T·ª´ m·ªôt s·ªë l∆∞·ª£ng gi·ªõi h·∫°n c√°c gi·∫£i ph√°p tham gia (tournament_size), ch·ªçn ra gi·∫£i ph√°p t·ªët nh·∫•t d·ª±a tr√™n h√†m crowding_operator.
'''
def __tournament(population, tournament_size):
    # Ch·ªçn ng·∫´u nhi√™n tournament_size gi·∫£i ph√°p t·ª´ qu·∫ßn th·ªÉ (population) => Khoong tr√πng l·∫∑p (replace=False)
    participants = np.random.choice(population, size=(tournament_size,), replace=False)
    best = None
    for participant in participants:
        # N·∫øu best ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c participant t·ªët h∆°n best (d·ª±a tr√™n h√†m crowding_operator), c·∫≠p nh·∫≠t best.
        if best is None or (
                crowding_operator(participant, best) == 1):  # and self.__choose_with_prob(self.tournament_prob)):
            best = participant

    return best

'''
S·ª≠ d·ª•ng h√†m __tournament ƒë·ªÉ ch·ªçn c·∫∑p cha m·∫π t·ª´ qu·∫ßn th·ªÉ cho qu√° tr√¨nh lai gh√©p v√† ƒë·ªôt bi·∫øn.
'''
def tournament_selection(population, tournament_size):
    parents = []
    # len(population) // 2: S·ªë c·∫∑p cha m·∫π b·∫±ng m·ªôt n·ª≠a k√≠ch th∆∞·ªõc qu·∫ßn th·ªÉ.
    while len(parents) < len(population) // 2:
        parent1 = __tournament(population, tournament_size)
        parent2 = __tournament(population, tournament_size)

        parents.append([parent1, parent2])
    return parents
